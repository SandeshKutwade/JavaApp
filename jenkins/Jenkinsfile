pipeline {
    agent any

    tools {
        maven 'maventool' 
    }

    environment {
        SONARQUBE_ENV = 'SonarCloud'
        DOCKER_CREDENTIALS_ID = 'DockerHub'  // Jenkins credentials ID for Docker Hub
        DOCKER_IMAGE = 'sandeshdockerhub/practicerepodocker'
    }

    stages {

        stage('Build with Maven') {
            steps {
                // Clean and package the application using Maven
                sh 'mvn clean package'
            }
        }

        stage('build with sonar') {
		steps {
			withSonarQubeEnv(credentialsId: 'sandeshkutwade123', installationName: 'SonarCloud') { 
				sh '/opt/maven/bin/mvn clean package org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar -D sonar.organization=sandeshkutwade123 -D sonar.projectKey=85e0a170c4e35ec5735204771fc8f4a4e07e82b5'
			}
			junit testResults: '**/surefire-reports/*.xml'
			// archive '**/target/spring-petclinic-*.jar'
		}
	}

        stage('Build Docker Image') {
            steps {
           
                sh 'docker build -t hello-world-app .'
            }
        }

        stage('Run Docker Container') {
            steps {
              
                sh 'docker run -d -p 8081:8080 --name hello-world-app hello-world-app'
            }
        }
    }
        stage('Push Docker Image to Docker Hub') {
                steps {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                            sh "docker tag hello-world-app ${DOCKER_IMAGE}"
                            sh "docker push ${DOCKER_IMAGE}"
                        }
                    }
                }
            }

    // post {
    //     always {
    //         // Clean up the Docker container after the build
    //         sh 'docker stop hello-world-app || true'
    //         sh 'docker rm hello-world-app || true'
    //     }
    // }
}







	
	// stage("Quality Gate") {
	// 	steps {
	// 		timeout(time: 1, unit: 'HOURS') {
	// 			// Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
	// 			// true = set pipeline to UNSTABLE, false = don't
	// 			waitForQualityGate abortPipeline: true
	// 		}
	// 	}
	// }
	
//   }
    
// }